definitions:
  section_definitions:
  - base_sections:
    - nomad.datamodel.data.ArchiveSection
    description: A base section used to specify a well-defined program used for simulations.
    name: Program
    quantities:
    - description: The name of the program.
      name: name
      type:
        type_data: str
        type_kind: python
    - description: The version label of the program.
      name: version
      type:
        type_data: str
        type_kind: python
  - base_sections:
    - nomad.datamodel.metainfo.basesections.System
    description: A base section used to specify the system information used for simulations.
    name: ModelSystem
    quantities:
    - description: 'Notation for the structure of molecules following the Simplified
        Molecular-Input Line-Entry

        System (SMILES), https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system.'
      name: smiles
      type:
        type_data: str
        type_kind: python
    - description: 'Notation for the structure of molecules following the SELF-referencing
        embedded string

        (SELFIES) , https://www.sciencedirect.com/science/article/pii/S2666389922002069.'
      name: selfies
      type:
        type_data: str
        type_kind: python
    - description: Notation for the structure of molecules following the DeepSMILES,
        https://chemrxiv.org/engage/chemrxiv/article-details/60c73ed6567dfe7e5fec388d.
      name: deepsmiles
      type:
        type_data: str
        type_kind: python
    - description: Notation for the structure of molecules following the canonical
        SMILES, https://pubs.acs.org/doi/abs/10.1021/ci00062a008.
      name: canonical
      type:
        type_data: str
        type_kind: python
    - description: 'Notation for the structure of molecules following the IUPAC International
        Chemical Identifier,

        (InChI), https://iupac.org/who-we-are/divisions/division-details/inchi/'
      name: inchi
      type:
        type_data: str
        type_kind: python
    - description: 'Notation for the structure of molecules following the Sequential
        Attachment-based Fragment

        Embedding (SAFE), https://arxiv.org/abs/2310.10773.'
      name: safe
      type:
        type_data: str
        type_kind: python
    - description: 'Notation for the structure of molecules following the International
        Union Pure and Applied

        Chemistry (IUPAC), https://iupac.org/what-we-do/.'
      name: iupac
      type:
        type_data: str
        type_kind: python
  - base_sections:
    - nomad.datamodel.metainfo.basesections.Activity
    - nomad.datamodel.data.EntryData
    name: Simulation
    sub_sections:
    - name: program
      sub_section: /definitions/section_definitions/0
    - name: model_system
      repeats: true
      sub_section: /definitions/section_definitions/1
    - name: model_method
      repeats: false
      sub_section: /definitions/section_definitions/4
    - name: outputs
      repeats: true
      sub_section: /definitions/section_definitions/3
  - base_sections:
    - nomad.datamodel.data.ArchiveSection
    description: Output properties of a simulation. This base class can be used for
      inheritance in any of the output properties defined in this schema.
    name: Outputs
    quantities:
    - description: 'Reference to the `ModelSystem` section to which the output property
        references to and on

        on which the simulation is performed.'
      name: model_system_ref
      type:
        type_data: /definitions/section_definitions/1
        type_kind: reference
    sub_sections:
    - name: total_energy
      sub_section: /definitions/section_definitions/6
    - name: electronic_energy
      sub_section: /definitions/section_definitions/7
    - name: repulsive_energy
      sub_section: /definitions/section_definitions/8
    - name: ionization_potential
      sub_section: /definitions/section_definitions/9
    - name: gap_energy
      sub_section: /definitions/section_definitions/10
    - name: heat_of_formation
      sub_section: /definitions/section_definitions/11
    - name: multipole_moment
      sub_section: /definitions/section_definitions/12
    - name: enthalpy
      sub_section: /definitions/section_definitions/13
    - name: entropy
      sub_section: /definitions/section_definitions/14
    - name: heat_capacity
      sub_section: /definitions/section_definitions/15
    - name: zero_point_energy
      sub_section: /definitions/section_definitions/16
    - name: electronic_levels
      sub_section: /definitions/section_definitions/17
    - name: vibrational_modes
      sub_section: /definitions/section_definitions/18
    - name: vibrational_spectrum
      sub_section: /definitions/section_definitions/19
  - base_sections:
    - nomad.datamodel.data.ArchiveSection
    description: A base section used to specify the method solver information used
      for simulations.
    name: ModelMethod
    quantities:
    - description: Details on the simulation method used to generate data, https://www.3ds.com/assets/invest/2023-10/biovia-material-studio-vamp.pdf.
      name: name
      type:
        type_data: str
        type_kind: python
  - base_sections:
    - nomad.datamodel.data.ArchiveSection
    description: 'A base section used to define the physical properties obtained in
      a simulation, experiment, or in a post-processing analysis. The main quantity
      of the `PhysicalProperty` is `value`, whose instantiation has to be overwritten
      in the derived classes

      when inheriting from `PhysicalProperty`. It also contains `rank`, to define
      the tensor rank of the physical property, and

      `variables`, to define the variables over which the physical property varies
      (see variables.py). This class can also store several

      string identifiers and quantities for referencing and establishing the character
      of a physical property.'
    name: PhysicalProperty
  - base_sections:
    - /definitions/section_definitions/5
    name: TotalEnergy
    quantities:
    - description: 'Total energy from semiempirical VAMP calculation. This value is
        dependent on the basis selected

        and should not be used as an absolute value. Difference between Electronic
        Energy and Repulsive Energy.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: ElectronicEnergy
    quantities:
    - description: Electron energy from semiempirical VAMP calculation. This value
        is dependent on the basis selected.
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: RepulsiveEnergy
    quantities:
    - description: 'Repulsive Energy from semiempirical VAMP calculation. This is
        the core-core repulsion energy. This value

        is depednent on the basis selected.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: IonizationPotential
    quantities:
    - description: Ionization Potential from semiempirical VAMP calculation.
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: GapEnergy
    quantities:
    - description: Highest occupied molecular orbital value.
      name: value_homo
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: electron_volt
    - description: Lowest unoccupied molecular orbital value.
      name: value_lumo
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: electron_volt
    - description: 'Value of the gap of energies. This is calculated as the difference
        `value_homo - value_lumo`; if the

        `value` is negative, we don''t set it.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: electron_volt
  - base_sections:
    - /definitions/section_definitions/5
    name: HeatOfFormation
    quantities:
    - description: 'Heat of Formation. A fundamental inconsistency inherent in the
        parameterization of semiempirical methods to

        reproduce heats of formation. The energy calculated by VAMP is the internal
        energy of a hypothetical

        motionless (Born-Oppenheimer) state. To relate this energy to heats of formation
        at 298 K, an atom-based

        scheme is used, assuming that the energy difference between the Born-Oppenheimer
        state and the molecule at

        298 K can be treated in an additive fashion. JANAF Thermochemical Tables 2nd
        Edition are used for molecule.

        This means that the zero-point energy and the energy required to warm the
        molecule to 298 K are assumed to

        be identical for isomers. This is clearly not the case and can lead to errors
        of up to 5 kcal mol-1.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: MultipoleMoment
    quantities:
    - description: Value of the total dipole moment of the system.
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: coulomb * meter
    - description: Value of the X,Y,Z component of the dipole moment vector of the
        system.
      name: value_dipole
      shape:
      - 3
      type:
        type_data: float64
        type_kind: numpy
      unit: coulomb * meter
  - base_sections:
    - /definitions/section_definitions/5
    name: Enthalpy
    quantities:
    - description: 'Enthalpy at 298K. Thermodynamics calculations yield enthalpy changes
        between the Born-Oppenheimer

        state and the temperature in question. A fictitious Born-Oppenheimer energy
        is used in thermodynamics calculations.

        The best procedure is simply to ignore the "heat of formation" and to calculate
        thermodynamic quantities for

        reactions based on the Born-Oppenheimer energy and the calculated enthalpy
        changes, as for ab initio calculations.

        The electronic contribution is determined based on ideal gas apprximation.
        The vibrational contribution is determined

        based on vibrational calculation and equation found in Hirano et al.,1993.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: Entropy
    quantities:
    - description: 'Entropy at 298K.Thermodynamics calculations yield entropy changes
        between the Born-Oppenheimer

        state and the temperature in question. A fictitious Born-Oppenheimer energy
        is used in thermodynamics calculations.

        The best procedure is simply to ignore the "heat of formation" and to calculate
        thermodynamic quantities for

        reactions based on the Born-Oppenheimer energy and the calculated entropy
        changes, as for ab initio calculations.

        The vibrational contribution is determined based on vibrational calculation
        and equation found in Hirano et al.,1993.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule / kelvin
  - base_sections:
    - /definitions/section_definitions/5
    name: HeatCapacity
    quantities:
    - description: 'Heat capacity at 298K for both Electronic and Vibrational Contribution.
        The heat capacity is calculated at constant

        pressure, Cp, based on the ideal gas for the translational and rotational
        terms. Vibrational contribution is calculated

        based on the vibrational calculation and equation found in Hirano et al.,1993.'
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule / kelvin
  - base_sections:
    - /definitions/section_definitions/5
    name: ZeroPointEnergy
    quantities:
    - description: Zero point energy.
      name: value
      shape: []
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
  - base_sections:
    - /definitions/section_definitions/5
    name: ElectronicLevels
    quantities:
    - description: Type of electronic levels. For example, UV-VIS.
      name: type
      shape: []
      type:
        type_data: str
        type_kind: python
    - description: Number of electronic levels.
      name: n_levels
      shape: []
      type:
        type_data: int32
        type_kind: numpy
    - description: Excited state number. Listed from lowest to highest energy levels.
      name: excited_state
      shape:
      - n_levels
      type:
        type_data: int32
        type_kind: numpy
    - description: Electronic transition energy.
      name: value
      shape:
      - n_levels
      type:
        type_data: float64
        type_kind: numpy
      unit: joule
    - description: Electronic transition in wavelength.
      name: value_wavelength
      shape:
      - n_levels
      type:
        type_data: float64
        type_kind: numpy
      unit: meter
    - description: Electronic transition strength. Determined based on overlap of
        the initial and final wavefunctions.
      name: oscillator_strength
      shape:
      - n_levels
      type:
        type_data: float64
        type_kind: numpy
      unit: dimensionless
    - description: 'Transition type of the electronic level. For example, 1 for singlet
        and 3 for triplet. Singlet state

        is a state with all electron spins paired. Triplet state is a state with two
        unpaired electrons.'
      name: transition_type
      shape:
      - n_levels
      type:
        type_data: int32
        type_kind: numpy
  - base_sections:
    - /definitions/section_definitions/5
    name: VibrationalModes
    quantities:
    - description: Number of vibrational or phonon mode number. Ascending order based
        on inverse wavelength or frequency.
      name: n_modes
      shape: []
      type:
        type_data: int32
        type_kind: numpy
    - description: Vibrational modes type. For example, A=Acoustic and O=Optical.
      name: value
      shape:
      - n_modes
      type:
        type_data: str
        type_kind: python
    - description: Vibrational modes inverse wavelength, which is proportional to
        the frequency.
      name: frequency
      shape:
      - n_modes
      type:
        type_data: float64
        type_kind: numpy
      unit: hertz
    - description: Vibrational modes reduced masses.
      name: reduced_mass
      shape:
      - n_modes
      type:
        type_data: float64
        type_kind: numpy
      unit: dimensionless
    - description: Vibrational mode Raman intensities.
      name: raman_intensity
      shape:
      - n_modes
      type:
        type_data: float64
        type_kind: numpy
      unit: dimensionless
  - base_sections:
    - /definitions/section_definitions/5
    name: VibrationalSpectrum
    quantities:
    - description: Number of frequencies.
      name: n_frequencies
      shape: []
      type:
        type_data: int32
        type_kind: numpy
    - description: Vibrational modes inverse wavelength, which is proportional to
        the frequency.
      name: frequency
      shape:
      - n_frequencies
      type:
        type_data: float64
        type_kind: numpy
      unit: hertz
    - description: Vibrational spectrum intensity values.
      name: value
      shape:
      - n_frequencies
      type:
        type_data: float64
        type_kind: numpy
      unit: meter / mole
